#################################################################
# For each chunk of public information sent generate an RSA
# Digital Signature. (Module 6)
#################################################################

#########
# Part 1
#########
from Crypto.PublicKey import RSA
from hashlib import sha512

# Ignore this part for now, because rsa functions in lecture video are deprecated in Py3
# f = open('ds_key.pem','wb')
# f.write(keyPair.export_key('PEM'))
# f.close()

# Attempt at using built in key generation
keyPair = RSA.generate(bits=1024)
mod = keyPair.n
pub_exp = keyPair.e
pri_exp = keyPair.d
# first_fac = keyPair.p
# second_fac = keyPair.q
# chin_remain = keyPair.u

print('Modulus: ' + str(mod))
print('Modulus len: ' + str(len(str(mod))))

print(f"Public key:  '(n='{hex(keyPair.n)}, e={hex(keyPair.e)})")
#print(f"Private key: (n={hex(keyPair.n)}, d={hex(keyPair.d)})")

# RSA sign the message
msg = b'I solemnly swear to learn applied cryptography. Even though there are not enough graded assignments to ' \
      b'incentivize the needed hours I will: 1) work problems 2) ask questions 3) ponder start-ups 4) think in a ' \
      b'paranoid fashion 5) get it done without excuse '
hash = int.from_bytes(sha512(msg).digest(), byteorder='big')
signature = pow(hash, keyPair.d, keyPair.n)
# print("Signature:", hex(signature))
print("Signature:", signature)

# RSA verify signature
hashFromSignature = pow(signature, keyPair.e, keyPair.n)
print("Signature valid:", hash == hashFromSignature)

# Verify student Sig:
# sig = 4257340017219524310028276128681247215408389545549587681023000086897855739138565535374821188045327017564683810193159066381278210059640894164598129122656795961390104677169851893899553568068811164848993875660439795547627536789861761121415589949919567897796373937984155898738830648463473029637200661215874605275090021913537460262692926153708817443245303324507801747333466737489967117329174482775146993551907658692161151899394672274740881833149915657805671601972412170925459677422299942972813565040531302204829661018758434632083505422198204108941813191706247827641714576403348644660206678251887842560736067913486663368987909516772815387797724652334875904877739572884698612204388229800843014631577930390115329911416262433653205461495948575769928471825246594947801407222108583915761214290297597681215114387994683960359923173934097898341739608737161261932118669514534432420862062689705377209627398928281400700640936297961543386663534
# n = 4281047132957703297045682029583881003122513814870764403867731433332109735380738895011143434067408017528245024049612682617381583441544015618468982338824970980865099521141925984439672343629386458147334798657748408771673880752854541307354463343352415654847909994592001027398521857875264408285202626887989356228521529887565273229638105326324336862649205912886733108636747288963340103665789358202546338966441017118760261970278786609599770603722198401188635458952679885093017256386420672375065835420145800333826562876380971724821541452101165935585793005885250587670006483897233927938069502172119079863245958744203347425815820263533643029145768927259089029775382971481660645619192954487845875048627773092224031820349314846838729669855702923992981545574774692544006575113947807391097065800258331606102294939277906493658921873325236020388901335401220479226406091635863620113831426268683107982649956759475625081709275714222836828149197
# e = 65537
# hashFromSignature = pow(sig, e, n)
# print("Signature valid:", hash == hashFromSignature)

# Convert message to integer
int_arr = [int(a) for a in msg]
int_msg = ''.join([str(elem) for elem in int_arr])
print('Integer message: ' + str(int_msg))
print('Integer message len: ' + str(len(str(int_msg))))


